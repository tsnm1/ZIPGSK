% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ZIPG_SK.R
\name{ZIPG_SK}
\alias{ZIPG_SK}
\title{Simultaneous knockoff for multi-source count data}
\usage{
ZIPG_SK(
  W = W,
  class_K = class_K,
  data_x = NULL,
  M = NULL,
  y = y,
  T_var = 1,
  fdr = 0.2,
  offset = 1,
  test_statistic = "DE",
  filter_statistics = 3,
  test1 = "wilcox.test"
)
}
\arguments{
\item{W}{Count data}

\item{class_K}{Matrix data, representing the input of count data;}

\item{data_x}{Vector data, representing different sources of multi-source data; default is NULL, representing one source or pooling method;}

\item{M}{The sequencing depth of count data, which was the row sum of matrix data;}

\item{y}{Response variable, representing binary, continuous or mixed variables;}

\item{T_var}{True correlation variable, which represents the set of variables that are truly correlated with the response variable, defaults to NULL;}

\item{fdr}{the target FDR level, default 0.2;}

\item{offset}{value between 0 and 1;}

\item{test_statistic}{Statistics for a single source dataset, c('DE','GLM','RF')}

\item{filter_statistics}{The statistics of the dataset were calculated from multiple sources. Denote c(cumprod,max, sum) by 1,2,3;}

\item{test1}{Test method, select when selecting 'DE', default is "wilcox.test", c("wilcox.test",'ks.test','mmd','distance_JS').}
}
\value{
c_w: Results of test statistics for multiple single-source datasets;
c_w_b: The filter statisticss of the dataset were calculated from multiple sources;
S: The variable selection set;
FDRPower: The resulting FDR and Power are calculated after given T_var.
}
\description{
Simultaneous knockoff for multi-source count data
}
\examples{

data(data_pg_copula)
i <- 1 # or 2
data_K_j <- data_pg_copula[[1]][[1]][[i]][[1]][[1]]
count_K_j <- data_K_j # [data_K_j[,1]==c,]
n_x1 <- 3
data_x <- as.data.frame(count_K_j[, c(1:n_x1 + 1)])
W <- as.data.frame(count_K_j[, -c(1:(n_x1 + 2))])
M <- count_K_j[, n_x1 + 2]
n_w <- dim(W)[1]
n_data <- 2
y <- rep(rep(c(1, 2), n_data), rep(n_w / 2 / n_data, n_data * 2))
class_K <- rep(c(1:n_data), rep(n_w / n_data, n_data))
n_p_all <- c(50, 100, 400)
n_p <- c(10, 20, 40)
T_var <- 1:n_p[i]
name_data <- names(table(class_K))
fdr <- 0.2

ZIPG_DE_S3 <- ZIPG_SK(
  W = W, class_K = class_K, data_x = data_x, M = M, y = y, T_var = T_var,
  fdr = fdr, test_statistic = "DE", filter_statistics = 3
)
ZIPG_DE_S3$S
ZIPG_DE_S3$FDRPower

}
